swaggerVersion: 1.2
apiVersion: 1.0
basePath: api.datavalidation.com
resourcePath: /batch
produces:
  - application/json
consumes:
  - application/json
apis:
  - path: /list/
    operations:
      - method: GET
        nickname: getLists
        summary: Retrieve your lists
        type: ListCollection
        notes: |
          You can use this to retrieve summary or detailed data about all the lists
          in your account, or just a few using filters.
        parameters:
          - name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: 500
          - name: _expand
            description: Expand the list of items?
            paramType: query
            type: boolean
            defaultValue: false
          - name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
      - method: POST
        nickname: createList
        summary: Create a new list
        type: ListResponse
        consumes: ['text/csv']
        notes: |
          This method is used to create a list. Note that you must provide mapping data in
          the URL parameters as documented below.
        parameters:
          - name: header
            paramType: query
            description: Is there a header row present in the CSV data
            required: true
            type: boolean
          - name: email
            paramType: query
            description: Which column is the email address in? (0 = first column)
            required: true
            type: integer
          - name: metadata
            paramType: query
            required: true
            type: string
            format: other
            description: Should the metadata (non-email) in the CSV be stored? (true or false)
          - name: slug_col
            required: false
            paramType: query
            type: integer
            description: |
              The column in the csv containing a slug for each member. If this is omitted,
              a slug will be generated automatically.
  - path: /list/{list_slug}/
    operations:
      - method: GET
        nickname: getList
        summary: Retrieve an individual list by its slug
        type: ListResponse
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
      - method: DELETE
        nickname: deleteList
        summary: Delete an individual list and all its subscribers
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
  - path: /list/{list_slug}/unsubscribe.csv
    operations:
      - method: POST
        nickname: bulkRemoveFromList
        summary: Remove subscribers from a given list via csv
        consumes: ['text/csv']
        parameters:
        - name: list_slug
          paramType: path
          type: string
          description: The slug (ID) of the list that members are to be unsubscribed from
          defaultValue: random-slug
        - name: header
          paramType: query
          description: Is there a header row present in the CSV data
          required: true
          type: boolean
        - name: slug_col
          required: true
          paramType: query
          type: integer
          description: The column in the csv containing the slug for each member.
  - path: /list/{list_slug}/subscribe.csv
    operations:
      - method: POST
        nickname: appendList
        summary: Add more subscribers to a given list
        type: ListResponse
        consumes: ['text/csv']
        notes: |
          This method is used to subscribe additional users to a list. Note that you must
          provide mapping data in the URL parameters as documented below.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: header
            paramType: query
            description: Is there a header row present in the CSV data
            required: true
            type: boolean
          - name: email_col
            paramType: query
            description: Which column is the email address in? (0 = first column)
            required: true
            type: integer
          - name: metadata
            paramType: query
            required: true
            type: string
            format: other
            description: Should the metadata (non-email) in the CSV be stored? (true or false)
          - name: slug_col
            required: false
            paramType: query
            type: integer
            description: |
              The column in the csv containing a slug for each member. If this is omitted,
              a slug will be generated automatically.
  - path: /list/{list_slug}/export.csv
    operations:
      - method: GET
        nickname: exportList
        summary: Export the subscribers in a list
        produces: ['text/csv']
        notes: |
          Use this method for bulk export of list subscribers.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug

  - path: /list/{list_slug}/member/
    operations:
      - method: GET
        nickname: getListMembers
        summary: Get the members of a list
        notes: |
          Use this to retrieve / filter the members of your list
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: 500
          - name: _expand
            description: Expand the list of items?
            paramType: query
            type: boolean
            defaultValue: false
          - name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
      - method: POST
        nickname: createListMember
        summary: Create a new list member
        type: MemberResponse
        notes: |
          Use this to create a single member on your list.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: body
            paramType: body
            type: NewMember

  - path: /list/{list_slug}/member/{member_slug}/
    operations:
      - method: GET
        nickname: getListMember
        type: MemberResponse
        summary: Load a single member's data
        notes: |
          Use this to get a single member from your list.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug
          - name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
      - method: PUT
        nickname: putListMember
        type: MemberResponse
        summary: Update a single member's data
        notes: |
          Use this to update a single member on your list. Note that whatever you provide in
          the request body will *replace* the information for that member in your list.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug
          - name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
          - name: body
            paramType: body
            description: Member information
            type: Member
      - method: DELETE
        nickname: deleteListMember
        summary: Remove a single member from your list
        notes: |
          Use this to remove a single member on your list.
        parameters:
          - name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug

models:

  NewMember:
    id: NewMember
    required: ['address']
    properties:
      slug: {type: string, defaultValue: random-or-user-defined-slug}
      address: {type: string, format: email, defaultValue: test@example.com}
      metadata: {$ref: Metadata}

  Member:
    id: Member
    required: ['address']
    properties:
      address: {type: string, format: email, defaultValue: test@example.com}
      metadata: {$ref: Metadata}

  MemberResponse:
    id: MemberResponse
    required: ['meta', 'slug', 'address', 'metadata']
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-or-user-defined-slug}
      address: {type: string, format: email, defaultValue: test@example.com}
      metadata: {$ref: Metadata}

  MemberCollection:
    id: MemberCollection
    required: ['meta', 'paging', 'items']
    properties:
      meta: {$ref: MetaRef}
      paging: {$ref: Paging}
      items:
        type: array
        items: {$ref: MemberItem}

  MemberItem:
    id: MemberItem
    required: ['meta']
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-or-user-defined-slug}
      address: {type: string, format: email, defaultValue: test@example.com}
      metadata: {$ref: Metadata}

  ListCollection:
    id: ListCollection
    required: ['meta', 'paging', 'items']
    properties:
      meta: {$ref: MetaRef}
      paging: {$ref: Paging}
      items:
        type: array
        items: {$ref: ListItem}

  ListItem:
    id: ListItem
    required: ['meta']
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-slug}
      size: {type: integer}

  ListResponse:
    id: ListResponse
    required: ['meta', 'slug', 'size']
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-slug}
      size: {type: integer}

  MetaRef:
    id: MetaRef
    required: ['href', 'links']
    properties:
      href: {type: string, format: uri, defaultValue: "http://example.com"}
      links:
        type: array
        items: {$ref: Link}

  Link:
    id: Link
    required: [rel, href]
    properties:
      rel: {type: string, defaultValue: relation}
      href: {type: string, format: uri, defaultValue: 'http://example.com'}

  Metadata:
    id: Metadata
    properties: {}
    description: 'Arbitrary metadata mapping (string => string)'
    additionalProperties: true


