swaggerVersion: 1.2
apiVersion: 1.0
basePath: api.datavalidation.com
resourcePath: /batch
produces:
  - application/json
consumes:
  - application/json
apis:
  - path: /list/
    operations:
      - method: GET
        nickname: getLists
        summary: Retrieve your lists
        type: ListCollection
        notes: |
          You can use this to retrieve summary or detailed data about all the lists
          in your account, or just a few using filters.
        parameters:
          - name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: 500
          - &_expand
            name: _expand
            description: Expand the list of items?
            paramType: query
            type: boolean
            defaultValue: false
          - &pretty
            name: pretty
            description: Indent JSON output?
            paramType: query
            type: boolean
            defaultValue: false
      - method: POST
        nickname: createList
        summary: Create a new list
        type: ListResponse
        consumes: ['text/csv']
        notes: |
          This method is used to create a list. Note that you must provide mapping data in
          the URL parameters as documented below.
        parameters:
          - name: header
            paramType: query
            description: Is there a header row present in the CSV data
            required: true
            type: boolean
          - name: email
            paramType: query
            description: Which column is the email address in? (0 = first column)
            required: true
            type: integer
          - name: metadata
            paramType: query
            required: true
            type: string
            format: other
            description: Should the metadata (non-email) in the CSV be stored? (true or false)
          - name: slug_col
            required: false
            paramType: query
            type: integer
            description: |
              The column in the csv containing a slug for each member. If this is omitted,
              a slug will be generated automatically.
  - path: /list/{list_slug}/
    operations:
      - method: GET
        nickname: getList
        summary: Retrieve an individual list by its slug
        type: ListResponse
        parameters:
          - &list_slug
            name: list_slug
            paramType: path
            type: string
            description: The slug (ID) of the list being updated
            defaultValue: random-slug
          - *pretty
      - method: DELETE
        nickname: deleteList
        summary: Delete an individual list and all its subscribers
        parameters:
          - *list_slug
  - path: /list/{list_slug}/unsubscribe.csv
    operations:
      - method: POST
        nickname: bulkRemoveFromList
        summary: Remove subscribers from a given list via csv
        consumes: ['text/csv']
        parameters:
        - *list_slug
        - name: header
          paramType: query
          description: Is there a header row present in the CSV data
          required: true
          type: boolean
        - name: slug_col
          required: true
          paramType: query
          type: integer
          description: The column in the csv containing the slug for each member.
  - path: /list/{list_slug}/subscribe.csv
    operations:
      - method: POST
        nickname: appendList
        summary: Add more subscribers to a given list
        type: ListResponse
        consumes: ['text/csv']
        notes: |
          This method is used to subscribe additional users to a list. Note that you must
          provide mapping data in the URL parameters as documented below.
        parameters:
          - *list_slug
          - name: header
            paramType: query
            description: Is there a header row present in the CSV data
            required: true
            type: boolean
          - name: email
            paramType: query
            description: Which column is the email address in? (0 = first column)
            required: true
            type: integer
          - name: metadata
            paramType: query
            required: true
            type: string
            format: other
            description: Should the metadata (non-email) in the CSV be stored? (true or false)
          - name: slug_col
            required: false
            paramType: query
            type: integer
            description: |
              The column in the csv containing a slug for each member. If this is omitted,
              a slug will be generated automatically.

  - path: /list/{list_slug}/export.csv
    operations:
      - method: GET
        nickname: exportList
        summary: Export the subscribers in a list
        produces: ['text/csv']
        notes: |
          Use this method for bulk export of list subscribers.
        parameters:
          - *list_slug

  - path: /list/{list_slug}/import/
    operations:
      - method: GET
        nickname: getImports
        summary: Retrieve the import jobs run on a list
        type: ImportCollection
        notes: |
          Use this to retrieve the import jobs run on a list in reverse-chronological order.
        parameters:
          - *list_slug
          - *pretty
          - *_expand
          - &paging_skip
            name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - &paging_limit
            name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: &paging_limit_max 500

      - method: POST
        nickname: createImport
        summary: Create (and start) an import job on a list
        type: ImportResponse
        notes: |
          Use this to create (and automatically start) an import from a URL.
        parameters:
          - *list_slug
          - *pretty
          - name: body
            type: Import
            paramType: body

  - path: /list/{list_slug}/import/{import_slug}/
    operations:
      - method: GET
        nickname: getImport
        summary: Retrieve the results (or status) of an import
        type: ImportResponse
        notes: |
          Use this to retrieve the current status of an import.
        parameters:
          - *list_slug
          - &import_slug
            name: import_slug
            type: string
            description: The slug of the import
            paramType: path
            defaultValue: random-slug
          - *pretty
      - method: DELETE
        nickname: deleteImport
        summary: Delete a (completed) import
        notes: |
          This is used to delete an import.
        parameters:
          - *list_slug
          - *import_slug


  - path: /list/{list_slug}/member/
    operations:
      - method: GET
        nickname: getListMembers
        summary: Get the members of a list
        notes: |
          Use this to retrieve / filter the members of your list
        parameters:
          - *list_slug
          - name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: 500
          - *_expand
          - *pretty
          - name: changed
            description: Filter the members based on the changed flag
            required: false
            paramType: query
            type: string
      - method: POST
        nickname: createListMember
        summary: Create a new list member
        type: MemberResponse
        notes: |
          Use this to create a single member on your list.
        parameters:
          - *list_slug
          - name: body
            paramType: body
            type: NewMember
      - method: PATCH
        nickname: updateMembers
        summary: Batch update of several members
        type: BatchUpdateResponse
        notes: |
          Use this to bulk update the members for a new analysis run on the list
        parameters:
          - *list_slug
          - name: body
            type: MemberUpdate
            paramType: body


  - path: /list/{list_slug}/member/{member_slug}/
    operations:
      - method: GET
        nickname: getListMember
        type: MemberResponse
        summary: Load a single member's data
        notes: |
          Use this to get a single member from your list.
        parameters:
          - *list_slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug
          - *pretty
      - method: PUT
        nickname: putListMember
        type: MemberResponse
        summary: Update a single member's data
        notes: |
          Use this to update a single member on your list. Note that whatever you provide in
          the request body will *replace* the information for that member in your list.
        parameters:
          - *list_slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug
          - *pretty
          - name: body
            paramType: body
            description: Member information
            type: UpdateMember
      - method: DELETE
        nickname: deleteListMember
        summary: Remove a single member from your list
        notes: |
          Use this to remove a single member on your list.
        parameters:
          - *list_slug
          - name: member_slug
            paramType: path
            type: string
            description: The slug (ID) of the member being updated
            defaultValue: random-or-user-defined-slug
  - path: /list/{list_slug}/job/
    operations:
      - method: GET
        nickname: getJob
        type: JobCollection
        summary: Retrieve the validation jobs run on a list
        notes: |
          Use this to retrieve the validation jobs run on a list in reverse-chronological order.
        parameters:
          - *list_slug
          - *pretty
          - name: paging.skip
            description: Paging offset
            type: integer
            paramType: query
            defaultValue: 0
          - name: paging.limit
            description: Paging limit
            type: integer
            paramType: query
            defaultValue: 50
            maximum: 500
          - *_expand
      - method: POST
        nickname: createJob
        type: JobResponse
        summary: Start processing a List
        notes: |
          Use this to get information about your jobs.
        parameters:
          - *list_slug
          - *pretty
  - path: /list/{list_slug}/job/{job_slug}/
    operations:
      - method: GET
        nickname: getJob
        type: JobResponse
        summary: Information a specific Job
        notes: |
          Retrieve the results (or status) of a job
        parameters:
          - *list_slug
          - name: job_slug
            paramType: path
            type: string
            description: The slug (ID) of the job
            defaultValue: random-slug
          - *pretty
  - path: /list/{list_slug}/job/{job_slug}/export.csv
    operations:
      - method: GET
        nickname: exportJob
        produces: ['text/csv']
        summary: Retrives a CSV of Information from the specified Job
        notes: |
          Use this to get information about a job for a given list. This will return the bulk information for all of the members in the list.
          The return includes a location header which indicates where on S3 the CSV file is located. Please note that the link is only valid for 300 seconds (5 minutes). After that time a new call to this endpoint will generate a new valid link to the CSV file.
          The CSV will contain a header row, and will include the member slug, address, and analysis fields.
        parameters:
          - *list_slug
          - name: job_slug
            paramType: path
            type: string
            description: The slug (ID) of the job
            defaultValue: random-slug
          - *pretty

models:

  Import:
    id: Import
    required: ['href', 'mapping']
    properties:
      href: {type: string, format: uri, defaultValue: "http://example.com"}
      note: {type: string, defaultValue: "Whatever you want"}
      mapping: {$ref: ImportMapping}

  ImportCollectionItems:
    id: ImportCollectionItems
    required: ['meta', 'paging', 'items']
    meta: {$ref: MetaRef}
    paging: {$ref: Paging}
    items:
      type: array
      items: {$ref: ImportItem}

  ImportCollection:
    id: ImportCollection
    required: ['imports']
    properties:
      imports: {type: array, items: {$ref: ImportCollectionItems}}

  ImportResponse:
    id: ImportResponse
    required: ['meta', 'slug', 'href', 'note', 'mapping', 'status', 'created']

  NewMember:
    id: NewMember
    properties:
      slug: {type: string, defaultValue: random-or-user-defined-slug}
      address: {type: string, format: email, defaultValue: test@example.com}
      tags: {type: array, items: {$ref: Tag}}

  UpdateMember:
    id: UpdateMember
    properties:
      slug: {type: string, defaultValue: random-or-user-defined-slug}
      tags: {type: array, items: {$ref: Tag}}

  Member:
    id: Member
    required: ['address', 'meta', 'slug']
    properties:
      address: {type: string, format: email, defaultValue: test@example.com}
      tags: {type: array, items: {$ref: Tag}}
      changed: {type: boolean}
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-or-user-defined-slug}

  MemberResponse:
    id: MemberResponse
    required: ['member']
    properties:
      member: {$ref: Member}

  MemberUpdate:
    id: MemberUpdate
    properties:
      changed:
        type: boolean
        defaultValue: false
      tags: {$ref: TagsUpdate}

  ListCollection:
    id: ListCollection
    required: ['meta', 'paging', 'items']
    type: array
    properties:
      meta: {$ref: MetaRef}
      paging: {$ref: Paging}
      items:
        type: array
        items: {$ref: ListItem}

  ListItem:
    id: ListItem
    required: ['meta']
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-slug}
      size: {type: integer}

  ListResponse:
    id: ListResponse
    required: ['list']
    properties:
      list: {$ref: ListItem}

  MetaRef:
    id: MetaRef
    required: ['href']
    properties:
      href: {type: string, format: uri, defaultValue: "http://example.com"}
      links:
        type: array
        items: {$ref: Link}

  Paging:
    id: Paging
    required: [skip, limit, total]
    properties:
      skip: {type: integer}
      limit: {type: integer, maximum: *paging_limit_max}
      total: {type: integer}

  Link:
    id: Link
    required: [rel, href]
    properties:
      rel: {type: string, defaultValue: relation}
      href: {type: string, format: uri, defaultValue: 'http://example.com'}

  Tag:
    id: Tag
    required: ['name', 'value']
    properties:
      name: {type: string, defaultValue: Some name}
      value: {type: string, defaultValue: Some value}

  JobCollection:
    id: JobCollection
    required: ['meta', 'paging', 'items']
    properties:
      meta: {$ref: MetaRef}
      paging: {$ref: Paging}
      items:
        type: array
        items: {$ref: JobItem}

  JobItem:
    id: JobItem
    required: [meta]
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-slug}
      pct_complete:
        type: integer
        description: Percentage of completion of current stage (Validating/Analyzing)
        defaultValue: 0
      priority: {$ref: Priority}
      status:
        type: string
        description: Current status of the job
        defaultValue: 'Ready'
      created:
        type: string
        format: date-time
        description: Datetime of the job's creation
      analyze_only: {type: boolean, defaultValue: false}
      stats_only: {type: boolean, defaultValue: false}
      stats:
        $ref: Stats
        description: List analysis statistics


  JobResponse:
    id: JobResponse
    required: ['job']
    properties:
      job:
        type: array
        job: {$ref: JobResponseDetail}

  JobResponseDetail:
    id: JobResponseDetail
    required:
      - meta
      - slug
      - pct_complete
      - priority
      - status
      - created
      - analyze_only
      - stats_only
      - stats
    properties:
      meta: {$ref: MetaRef}
      slug: {type: string, defaultValue: random-slug}
      pct_complete:
        type: integer
        description: Percentage of completion of current stage (Validating/Analyzing)
        defaultValue: 0
      priority: {$ref: Priority}
      status:
        type: string
        description: Current status of the job
        defaultValue: 'Ready'
      created:
        type: string
        format: date-time
        description: Datetime of the job's creation
      analyze_only: {type: boolean, defaultValue: false}
      stats_only: {type: boolean, defaultValue: false}
      stats:
        $ref: Stats
        description: List analysis statistics

  BatchUpdateResponse:
    id: BatchUpdateResponse
    required: ['subscribed', 'unsubscribed']
    properties:
      subscribed: {type: integer, defaultValue: 0}
      unsubscribed: {type: integer, defaultValue: 0}
      updated: {type: integer, defaultValue: 0}
